return {
	-- "neovim/nvim-lspconfig",
	-- dependencies = {
	-- 	"stevearc/conform.nvim",
	-- 	"williamboman/mason.nvim",
	-- 	"williamboman/mason-lspconfig.nvim",
	-- 	"hrsh7th/cmp-nvim-lsp",
	-- 	"hrsh7th/cmp-buffer",
	-- 	"hrsh7th/cmp-path",
	-- 	"hrsh7th/cmp-cmdline",
	-- 	"hrsh7th/nvim-cmp",
	-- 	"L3MON4D3/LuaSnip",
	-- 	"saadparwaiz1/cmp_luasnip",
	-- 	"j-hui/fidget.nvim",
	-- },

	-- config = function()
	-- 	require("conform").setup({
	-- 		formatters_by_ft = {
	-- 			javascript = { "prettierd" },
	-- 			typescript = { "prettierd" },
	-- 			svelte = { "prettierd" },
	-- 			javascriptreact = { "prettierd" },
	-- 			typescriptreact = { "prettierd" },
	-- 			json = { "prettierd" },
	-- 			html = { "prettierd" },
	-- 			css = { "prettierd" },
	-- 			lua = { "stylua" },
	-- 		},
	-- 	})

	-- 	local cmp = require("cmp")
	-- 	local cmp_lsp = require("cmp_nvim_lsp")
	-- 	local capabilities = vim.tbl_deep_extend(
	-- 		"force",
	-- 		{},
	-- 		vim.lsp.protocol.make_client_capabilities(),
	-- 		cmp_lsp.default_capabilities()
	-- 	)

	-- 	require("fidget").setup({})
	-- 	require("mason").setup()
	-- 	require("mason-lspconfig").setup({
	-- 		ensure_installed = {
	-- 			"lua_ls",
	-- 			"rust_analyzer",
	-- 			"gopls",
	-- 			"svelte",
                -- "tailwindcss",
	-- 			"ts_ls",
	-- 		},
	-- 		handlers = {
	-- 			function(server_name)
	-- 				require("lspconfig")[server_name].setup({
	-- 					capabilities = capabilities,
	-- 				})
	-- 			end,

	-- 			["lua_ls"] = function()
	-- 				local lspconfig = require("lspconfig")
	-- 				lspconfig.lua_ls.setup({
	-- 					capabilities = capabilities,
	-- 					settings = {
	-- 						Lua = {
	-- 							format = {
	-- 								enable = true,
	-- 								defaultConfig = {
	-- 									indent_style = "space",
	-- 									indent_size = "2",
	-- 								},
	-- 							},
	-- 						},
	-- 					},
	-- 				})
	-- 			end,

	-- 			["svelte"] = function()
	-- 				require("lspconfig").svelte.setup({
	-- 					capabilities = capabilities,
	-- 					on_attach = function(client, bufnr)
	-- 						-- Optional: refresh diagnostics when svelte files change
	-- 						vim.api.nvim_create_autocmd("BufWritePost", {
	-- 							pattern = { "*.svelte" },
	-- 							callback = function(ctx)
	-- 								client.notify("$/onDidChangeTsOrJsFile", { uri = ctx.file })
	-- 							end,
	-- 						})
	-- 					end,
	-- 				})
	-- 			end,
                -- ['tailwindcss'] = function ()
	-- 				require("lspconfig").svelte.setup({
	-- 					capabilities = capabilities
                    -- })
                -- end,

	-- 			["ts_ls"] = function()
	-- 				require("lspconfig").ts_ls.setup({
	-- 					capabilities = capabilities,
	-- 					root_dir = require("lspconfig.util").root_pattern("package.json", "tsconfig.json", ".git"),
	-- 				})
	-- 			end,


	-- 		},
	-- 	})

	-- 	local cmp_select = { behavior = cmp.SelectBehavior.Select }

	-- 	cmp.setup({
	-- 		snippet = {
	-- 			expand = function(args)
	-- 				require("luasnip").lsp_expand(args.body)
	-- 			end,
	-- 		},
	-- 		mapping = cmp.mapping.preset.insert({
	-- 			["<C-p>"] = cmp.mapping.select_prev_item(cmp_select),
	-- 			["<C-n>"] = cmp.mapping.select_next_item(cmp_select),
	-- 			["<CR>"] = cmp.mapping.confirm({ select = true }),
	-- 			["<C-Space>"] = cmp.mapping.complete(),
	-- 		}),
	-- 		sources = cmp.config.sources({
	-- 			{ name = "copilot", group_index = 2 },
	-- 			{ name = "nvim_lsp" },
	-- 			{ name = "luasnip" },
	-- 		}, {
	-- 			{ name = "buffer" },
	-- 		}),
	-- 	})

	-- 	vim.diagnostic.config({
	-- 		float = {
	-- 			focusable = false,
	-- 			style = "minimal",
	-- 			border = "rounded",
	-- 			source = "always",
	-- 			header = "",
	-- 			prefix = "",
	-- 			scope = "line",
	-- 		},
            -- signs = {
                -- text = {
                    -- [vim.diagnostic.severity.ERROR] = '✘',
                    -- [vim.diagnostic.severity.WARN] = '▲',
                    -- [vim.diagnostic.severity.HINT] = '⚑',
                    -- [vim.diagnostic.severity.INFO] = '»',
                -- },
            -- },

	-- 	})

	-- end,
}
